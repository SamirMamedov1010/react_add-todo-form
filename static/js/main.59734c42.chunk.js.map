{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUser","userId","usersFromServer","find","getTodos","App","useState","setTitle","titleError","setTitleError","setUser","userError","setUserError","setTodos","handleChange","e","target","value","action","method","onSubmit","event","preventDefault","newTodoId","Math","max","newTodo","Number","trim","htmlFor","type","placeholder","onChange","disabled","userSelect","ReactDOM","render","document","getElementById"],"mappings":"4OAUaA,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,EAEED,EAFFC,MACAC,EACEF,EADFE,KAGF,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGC,KCHMG,EAAW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAEvBC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAT,EACEM,EADFN,KAGF,OACE,0BACE,UAASO,EACTJ,UAAWO,IACT,WACA,CAAE,sBAAuBD,IAJ7B,UAOE,oBAAIN,UAAU,kBAAd,SACGK,IAEFR,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QC5BlBW,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,yBAAST,UAAU,WAAnB,SACGS,EAAMC,KAAI,SAAAP,GAAI,OAAI,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKC,UCRxC,GACb,CACEA,GAAI,EACJL,KAAM,gBACNY,SAAU,OACVb,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,eACNY,SAAU,YACVb,MAAO,qBAET,CACEM,GAAI,EACJL,KAAM,mBACNY,SAAU,WACVb,MAAO,sBAET,CACEM,GAAI,EACJL,KAAM,mBACNY,SAAU,WACVb,MAAO,6BAET,CACEM,GAAI,EACJL,KAAM,mBACNY,SAAU,SACVb,MAAO,4BAET,CACEM,GAAI,EACJL,KAAM,uBACNY,SAAU,mBACVb,MAAO,2BAET,CACEM,GAAI,EACJL,KAAM,kBACNY,SAAU,eACVb,MAAO,0BAET,CACEM,GAAI,EACJL,KAAM,2BACNY,SAAU,gBACVb,MAAO,wBAET,CACEM,GAAI,EACJL,KAAM,kBACNY,SAAU,WACVb,MAAO,2BAET,CACEM,GAAI,GACJL,KAAM,qBACNY,SAAU,iBACVb,MAAO,2BCrDEc,EAAU,SAACC,GAGtB,OAFkBC,EAAgBC,MAAK,SAAAlB,GAAI,OAAIA,EAAKO,KAAOS,MAEvC,MAGTG,ECZE,CACb,CACEZ,GAAI,EACJC,MAAO,qBACPC,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,GACJC,MAAO,kBACPC,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,EACJC,MAAO,qCACPC,WAAW,EACXO,OAAQ,IDL4BH,KAAI,SAAAP,GAAI,kCAC3CA,GAD2C,IAE9CN,KAAMe,EAAQT,EAAKU,aAGRI,EAAM,WACjB,MAA0BC,mBAAS,IAAnC,mBAAOb,EAAP,KAAcc,EAAd,KACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KACA,EAAwBH,mBAAS,GAAjC,mBAAOrB,EAAP,KAAayB,EAAb,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0BN,mBAASF,GAAnC,mBAAOP,EAAP,KAAcgB,EAAd,KAiCMC,EAAe,SACnBC,GAEA,MAAwBA,EAAEC,OAAlB7B,EAAR,EAAQA,KAAM8B,EAAd,EAAcA,MAED,UAAT9B,GACFoB,EAASU,GACTR,GAAc,KAEdC,GAASO,GACTL,GAAa,KAIjB,OACE,sBAAKxB,UAAU,MAAf,UACE,+CAEA,uBACE8B,OAAO,aACPC,OAAO,OACPC,SApDe,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAYC,KAAKC,IAAL,MAAAD,KAAI,YAAQ3B,EAAMC,KAAI,SAAAP,GAAI,OAAIA,EAAKC,QAAO,EAU5D,GARKP,GACH2B,GAAa,GAGVnB,GACHgB,GAAc,GAGXhB,GAAUR,EAAf,CAIA,IAAMyC,EAAU,CACdlC,GAAI+B,EACJ7B,WAAW,EACXT,KAAMe,EAAQ2B,OAAO1C,IACrBQ,MAAOA,EAAMmC,OACb3B,OAAQ0B,OAAO1C,IAGjB4B,EAAS,GAAD,mBAAKhB,GAAL,CAAY6B,KAEpBhB,EAAQ,GACRH,EAAS,MAqBP,UAKE,sBAAKnB,UAAU,QAAf,UACE,uBAAOyC,QAAQ,aAAf,oBAGA,uBACEC,KAAK,OACL3C,KAAK,QACLK,GAAG,QACH,UAAQ,aACRuC,YAAY,QACZd,MAAOxB,EACPuC,SAAUlB,IAEXN,GAAc,sBAAMpB,UAAU,QAAhB,qCAGjB,sBAAKA,UAAU,QAAf,UACE,uBAAOyC,QAAQ,aAAf,mBACA,yBACE,UAAQ,aACR1C,KAAK,OACLK,GAAG,OACHyB,MAAOhC,EACP+C,SAAUlB,EALZ,UAOE,wBAAQG,MAAM,IAAIgB,UAAQ,EAA1B,2BACC/B,EAAgBJ,KAAI,SAACoC,GAAD,OACnB,wBAA4BjB,MAAOiB,EAAW1C,GAA9C,SACG0C,EAAW/C,MADD+C,EAAW1C,UAK3BmB,GAAa,sBAAMvB,UAAU,QAAhB,qCAGhB,wBAAQ0C,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAUjC,MAAOA,QEnHvBsC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.59734c42.chunk.js","sourcesContent":["export type User = {\n  id: number,\n  name: string,\n  email: string,\n};\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo, User } from '../UserInfo';\n\nexport type Todo = {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n};\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo = ({ todo }: Props) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo, Todo } from '../TodoInfo';\n\ntype TodoProps = {\n  todos: Todo[],\n};\n\nexport const TodoList = ({ todos }: TodoProps) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const getUser = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nexport const getTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [user, setUser] = useState(0);\n  const [userError, setUserError] = useState(false);\n  const [todos, setTodos] = useState(getTodos);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodoId = Math.max(...todos.map(todo => todo.id)) + 1;\n\n    if (!user) {\n      setUserError(true);\n    }\n\n    if (!title) {\n      setTitleError(true);\n    }\n\n    if (!title || !user) {\n      return;\n    }\n\n    const newTodo = {\n      id: newTodoId,\n      completed: false,\n      user: getUser(Number(user)),\n      title: title.trim(),\n      userId: Number(user),\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setUser(0);\n    setTitle('');\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (name === 'title') {\n      setTitle(value);\n      setTitleError(false);\n    } else {\n      setUser(+value);\n      setUserError(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">\n            Title:\n          </label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={handleChange}\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User:</label>\n          <select\n            data-cy=\"userSelect\"\n            name=\"user\"\n            id=\"user\"\n            value={user}\n            onChange={handleChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map((userSelect) => (\n              <option key={userSelect.id} value={userSelect.id}>\n                {userSelect.name}\n              </option>\n            ))}\n          </select>\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}